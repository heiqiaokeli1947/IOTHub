<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- mapper:根标签，namespace：命名空间，随便写，一般保证命名空间唯一 ，为了使用接口动态代理，这里必须是接口的全路径名-->
<mapper namespace="com.pengping.iothub.mapper.UserMapper">
    <!--
       1.#{},预编译的方式preparedstatement，使用占位符替换，防止sql注入，一个参数的时候，任意参数名可以接收
       2.${},普通的Statement，字符串直接拼接，不可以防止sql注入，一个参数的时候，必须使用${value}接收参数
     -->

    <select id="login" resultType="com.pengping.iothub.entity.User">
        select * from s_user_info where username = #{userName} and password = #{password}
    </select>

    <!-- statement，内容：sql语句。
       id：唯一标识，随便写，在同一个命名空间下保持唯一，使用动态代理之后要求和方法名保持一致
       resultType：sql语句查询结果集的封装类型，使用动态代理之后和方法的返回类型一致；resultMap：二选一
       parameterType：参数的类型，使用动态代理之后和方法的参数类型一致
     -->
    <select id="queryUserByUserId" resultType="com.pengping.iothub.entity.User">
        select * from s_user_info where UserId = #{UserId}
    </select>
    <select id="queryUserAll" resultType="com.pengping.iothub.entity.User">
        select * from s_user_info
    </select>
    <!-- 新增的Statement
       id：唯一标识，随便写，在同一个命名空间下保持唯一，使用动态代理之后要求和方法名保持一致
       parameterType：参数的类型，使用动态代理之后和方法的参数类型一致
       useGeneratedKeys:开启主键回写
       keyColumn：指定数据库的主键
       keyProperty：主键对应的pojo属性名
     -->
    <insert id="insertUser" parameterType="com.pengping.iothub.entity.User">


INSERT INTO s_user_info (
    userId,
    username,
    password,
    userType,
    status,
    registerTime,
    sex,
    province,
    city,
    country,
    headimgurl,
    privilege,
    unionid
        )
        VALUES
        (
        #{userId},
        #{userName},
        #{password},
        #{userType},
        #{status},
        NOW(),
        #{sex},
        #{province},
        #{city},
        #{country},
        #{headimgurl},
        #{privilege},
        #{unionid}
        );
    </insert>
<!--    &lt;!&ndash;
       更新的statement
       id：唯一标识，随便写，在同一个命名空间下保持唯一，使用动态代理之后要求和方法名保持一致
       parameterType：参数的类型，使用动态代理之后和方法的参数类型一致
     &ndash;&gt;
    <update id="updateUser" parameterType="com.pengping.iothub.entity.User">
        UPDATE s_user_info
        <trim prefix="set" suffixOverrides=",">
            <if test="userName!=null">user_name = #{userName},</if>
            <if test="password!=null">password = #{password},</if>
            <if test="name!=null">name = #{name},</if>
            <if test="age!=null">age = #{age},</if>
            <if test="sex!=null">sex = #{sex},</if>
            <if test="birthday!=null">birthday = #{birthday},</if>
            updated = now(),
        </trim>
        WHERE
        (id = #{id});
    </update>-->
    <!--
       删除的statement
       id：唯一标识，随便写，在同一个命名空间下保持唯一，使用动态代理之后要求和方法名保持一致
       parameterType：参数的类型，使用动态代理之后和方法的参数类型一致
     -->
    <delete id="deleteUserByUserId" parameterType="java.lang.String">
        delete from s_user_info where userId=#{userId}
    </delete>
</mapper>
